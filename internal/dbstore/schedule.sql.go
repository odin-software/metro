// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schedule.sql

package dbstore

import (
	"context"
)

const createScheduleEntry = `-- name: CreateScheduleEntry :one
INSERT INTO schedule (train_id, station_id, scheduled_time, sequence_order)
VALUES (?, ?, ?, ?)
RETURNING id, train_id, station_id, scheduled_time, sequence_order, created_at
`

type CreateScheduleEntryParams struct {
	TrainID       int64
	StationID     int64
	ScheduledTime int64
	SequenceOrder int64
}

func (q *Queries) CreateScheduleEntry(ctx context.Context, arg CreateScheduleEntryParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createScheduleEntry,
		arg.TrainID,
		arg.StationID,
		arg.ScheduledTime,
		arg.SequenceOrder,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.StationID,
		&i.ScheduledTime,
		&i.SequenceOrder,
		&i.CreatedAt,
	)
	return i, err
}

const deleteScheduleForTrain = `-- name: DeleteScheduleForTrain :exec
DELETE FROM schedule WHERE train_id = ?
`

func (q *Queries) DeleteScheduleForTrain(ctx context.Context, trainID int64) error {
	_, err := q.db.ExecContext(ctx, deleteScheduleForTrain, trainID)
	return err
}

const getAllSchedules = `-- name: GetAllSchedules :many
SELECT id, train_id, station_id, scheduled_time, sequence_order, created_at FROM schedule
ORDER BY train_id, sequence_order
`

func (q *Queries) GetAllSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.TrainID,
			&i.StationID,
			&i.ScheduledTime,
			&i.SequenceOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextScheduledStop = `-- name: GetNextScheduledStop :one
SELECT id, train_id, station_id, scheduled_time, sequence_order, created_at FROM schedule
WHERE train_id = ? AND sequence_order > ?
ORDER BY sequence_order ASC
LIMIT 1
`

type GetNextScheduledStopParams struct {
	TrainID       int64
	SequenceOrder int64
}

func (q *Queries) GetNextScheduledStop(ctx context.Context, arg GetNextScheduledStopParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getNextScheduledStop, arg.TrainID, arg.SequenceOrder)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.StationID,
		&i.ScheduledTime,
		&i.SequenceOrder,
		&i.CreatedAt,
	)
	return i, err
}

const getScheduleByTrainAndStation = `-- name: GetScheduleByTrainAndStation :one
SELECT id, train_id, station_id, scheduled_time, sequence_order, created_at FROM schedule
WHERE train_id = ? AND station_id = ?
LIMIT 1
`

type GetScheduleByTrainAndStationParams struct {
	TrainID   int64
	StationID int64
}

func (q *Queries) GetScheduleByTrainAndStation(ctx context.Context, arg GetScheduleByTrainAndStationParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleByTrainAndStation, arg.TrainID, arg.StationID)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.TrainID,
		&i.StationID,
		&i.ScheduledTime,
		&i.SequenceOrder,
		&i.CreatedAt,
	)
	return i, err
}

const getScheduleForStation = `-- name: GetScheduleForStation :many
SELECT id, train_id, station_id, scheduled_time, sequence_order, created_at FROM schedule
WHERE station_id = ?
ORDER BY scheduled_time ASC
`

func (q *Queries) GetScheduleForStation(ctx context.Context, stationID int64) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getScheduleForStation, stationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.TrainID,
			&i.StationID,
			&i.ScheduledTime,
			&i.SequenceOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleForTrain = `-- name: GetScheduleForTrain :many
SELECT id, train_id, station_id, scheduled_time, sequence_order, created_at FROM schedule
WHERE train_id = ?
ORDER BY sequence_order ASC
`

func (q *Queries) GetScheduleForTrain(ctx context.Context, trainID int64) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getScheduleForTrain, trainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.TrainID,
			&i.StationID,
			&i.ScheduledTime,
			&i.SequenceOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
