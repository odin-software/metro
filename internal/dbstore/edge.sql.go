// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: edge.sql

package dbstore

import (
	"context"
)

const getEdgePoints = `-- name: GetEdgePoints :many
SELECT id, edgeId, X, Y, Z, odr
FROM edge_point
WHERE edgeId = ?
ORDER BY odr
`

type GetEdgePointsRow struct {
	ID     int64
	Edgeid int64
	X      float64
	Y      float64
	Z      float64
	Odr    int64
}

func (q *Queries) GetEdgePoints(ctx context.Context, edgeid int64) ([]GetEdgePointsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEdgePoints, edgeid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEdgePointsRow
	for rows.Next() {
		var i GetEdgePointsRow
		if err := rows.Scan(
			&i.ID,
			&i.Edgeid,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Odr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEdges = `-- name: GetEdges :many
SELECT id, fromId, toId
FROM edge
`

func (q *Queries) GetEdges(ctx context.Context) ([]Edge, error) {
	rows, err := q.db.QueryContext(ctx, getEdges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Edge
	for rows.Next() {
		var i Edge
		if err := rows.Scan(&i.ID, &i.Fromid, &i.Toid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
