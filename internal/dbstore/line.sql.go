// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: line.sql

package dbstore

import (
	"context"
	"database/sql"
)

const addStationToLine = `-- name: AddStationToLine :one
INSERT INTO station_line (stationId, lineId, odr)
SELECT ?, ?, COALESCE(MAX(odr), 0) + 1
RETURNING id
`

type AddStationToLineParams struct {
	Stationid sql.NullInt64
	Lineid    sql.NullInt64
}

func (q *Queries) AddStationToLine(ctx context.Context, arg AddStationToLineParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addStationToLine, arg.Stationid, arg.Lineid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createLine = `-- name: CreateLine :one
INSERT INTO line (name, color)
VALUES (?, ?)
RETURNING id
`

type CreateLineParams struct {
	Name  string
	Color sql.NullString
}

func (q *Queries) CreateLine(ctx context.Context, arg CreateLineParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createLine, arg.Name, arg.Color)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createStationLine = `-- name: CreateStationLine :one
INSERT INTO station_line (stationId, lineId, odr)
VALUES (?, ?, ?)
RETURNING id
`

type CreateStationLineParams struct {
	Stationid sql.NullInt64
	Lineid    sql.NullInt64
	Odr       sql.NullInt64
}

func (q *Queries) CreateStationLine(ctx context.Context, arg CreateStationLineParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStationLine, arg.Stationid, arg.Lineid, arg.Odr)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAllLines = `-- name: DeleteAllLines :exec
DELETE FROM line
`

func (q *Queries) DeleteAllLines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllLines)
	return err
}

const deleteAllStationLines = `-- name: DeleteAllStationLines :exec
DELETE FROM station_line
`

func (q *Queries) DeleteAllStationLines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllStationLines)
	return err
}

const deleteLine = `-- name: DeleteLine :exec
DELETE FROM line 
WHERE id = ?
`

func (q *Queries) DeleteLine(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLine, id)
	return err
}

const getLineById = `-- name: GetLineById :one
SELECT id, name, color FROM line
WHERE id = ?
LIMIT 1
`

type GetLineByIdRow struct {
	ID    int64
	Name  string
	Color sql.NullString
}

func (q *Queries) GetLineById(ctx context.Context, id int64) (GetLineByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLineById, id)
	var i GetLineByIdRow
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}

const getLineByName = `-- name: GetLineByName :one
SELECT id, name, color FROM line
WHERE name = ?
LIMIT 1
`

type GetLineByNameRow struct {
	ID    int64
	Name  string
	Color sql.NullString
}

func (q *Queries) GetLineByName(ctx context.Context, name string) (GetLineByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getLineByName, name)
	var i GetLineByNameRow
	err := row.Scan(&i.ID, &i.Name, &i.Color)
	return i, err
}

const getLineStations = `-- name: GetLineStations :many
SELECT stationId FROM station_line
WHERE lineId = ?
ORDER by odr
`

func (q *Queries) GetLineStations(ctx context.Context, lineid sql.NullInt64) ([]sql.NullInt64, error) {
	rows, err := q.db.QueryContext(ctx, getLineStations, lineid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullInt64
	for rows.Next() {
		var stationid sql.NullInt64
		if err := rows.Scan(&stationid); err != nil {
			return nil, err
		}
		items = append(items, stationid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLineTrains = `-- name: GetLineTrains :many
SELECT id, name FROM train
WHERE lineId = ?
ORDER BY id
`

type GetLineTrainsRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetLineTrains(ctx context.Context, lineid sql.NullInt64) ([]GetLineTrainsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLineTrains, lineid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLineTrainsRow
	for rows.Next() {
		var i GetLineTrainsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPointsFromLine = `-- name: GetPointsFromLine :many
SELECT
	IFNULL(ep.x, st.x) x,
	IFNULL(ep.y, st.y) y,
	IFNULL(ep.z, st.z) z,
	cj.is_station
FROM
	line ln
	JOIN station_line sl ON ln.id = sl.lineId
	JOIN station st ON sl.stationId = st.id
	LEFT JOIN station_line sln ON sln.lineId = ln.id
		AND sln.odr = sl.odr + 1
	LEFT JOIN edge ed ON (ed.fromId = sl.stationId
		AND ed.toId = sln.stationId) OR (ed.fromId = sln.stationId
		AND ed.toId = sl.stationId)
	CROSS JOIN (
		SELECT
			1 is_station
	UNION
	SELECT
		0) cj
	LEFT JOIN edge_point ep ON ed.id = ep.edgeId
		AND cj.is_station = 0
WHERE
	ln.id = ?
	AND (cj.is_station = 1
		OR ep.id IS NOT NULL)
ORDER BY
	sl.odr,
	cj.is_station DESC,
	ep.odr
`

type GetPointsFromLineRow struct {
	X         interface{}
	Y         interface{}
	Z         interface{}
	IsStation int64
}

func (q *Queries) GetPointsFromLine(ctx context.Context, id int64) ([]GetPointsFromLineRow, error) {
	rows, err := q.db.QueryContext(ctx, getPointsFromLine, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPointsFromLineRow
	for rows.Next() {
		var i GetPointsFromLineRow
		if err := rows.Scan(
			&i.X,
			&i.Y,
			&i.Z,
			&i.IsStation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStationsFromLine = `-- name: GetStationsFromLine :many
SELECT
	st.id,
	st.name,
	st.x,
	st.y,
	st.z,
	st.color
FROM
	line ln
	JOIN station_line sl ON ln.id = sl.lineId
	JOIN station st ON sl.stationId = st.id
WHERE
	lineId = ?
`

type GetStationsFromLineRow struct {
	ID    int64
	Name  string
	X     sql.NullFloat64
	Y     sql.NullFloat64
	Z     sql.NullFloat64
	Color sql.NullString
}

func (q *Queries) GetStationsFromLine(ctx context.Context, lineid sql.NullInt64) ([]GetStationsFromLineRow, error) {
	rows, err := q.db.QueryContext(ctx, getStationsFromLine, lineid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStationsFromLineRow
	for rows.Next() {
		var i GetStationsFromLineRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLines = `-- name: ListLines :many
SELECT id, name FROM line
ORDER BY name
`

type ListLinesRow struct {
	ID   int64
	Name string
}

func (q *Queries) ListLines(ctx context.Context) ([]ListLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinesRow
	for rows.Next() {
		var i ListLinesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStationFromLine = `-- name: RemoveStationFromLine :exec
DELETE FROM station_line
WHERE stationId = ? AND lineId = ?
`

type RemoveStationFromLineParams struct {
	Stationid sql.NullInt64
	Lineid    sql.NullInt64
}

func (q *Queries) RemoveStationFromLine(ctx context.Context, arg RemoveStationFromLineParams) error {
	_, err := q.db.ExecContext(ctx, removeStationFromLine, arg.Stationid, arg.Lineid)
	return err
}

const updateLine = `-- name: UpdateLine :one
UPDATE line
SET name = ?
WHERE id = ?
RETURNING id
`

type UpdateLineParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateLine(ctx context.Context, arg UpdateLineParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateLine, arg.Name, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
