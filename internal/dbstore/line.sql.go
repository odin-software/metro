// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: line.sql

package dbstore

import (
	"context"
	"database/sql"
)

const createLine = `-- name: CreateLine :one
INSERT INTO line (name)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateLine(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createLine, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteLine = `-- name: DeleteLine :exec
DELETE FROM line 
WHERE id = ?
`

func (q *Queries) DeleteLine(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLine, id)
	return err
}

const getLineById = `-- name: GetLineById :one
SELECT id, name FROM line
WHERE id = ?
LIMIT 1
`

type GetLineByIdRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetLineById(ctx context.Context, id int64) (GetLineByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLineById, id)
	var i GetLineByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getLineByName = `-- name: GetLineByName :one
SELECT id, name FROM line
WHERE name = ?
LIMIT 1
`

type GetLineByNameRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetLineByName(ctx context.Context, name string) (GetLineByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getLineByName, name)
	var i GetLineByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getLineStations = `-- name: GetLineStations :many
SELECT stationId FROM station_line
WHERE lineId = ?
ORDER by odr
`

func (q *Queries) GetLineStations(ctx context.Context, lineid sql.NullInt64) ([]sql.NullInt64, error) {
	rows, err := q.db.QueryContext(ctx, getLineStations, lineid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullInt64
	for rows.Next() {
		var stationid sql.NullInt64
		if err := rows.Scan(&stationid); err != nil {
			return nil, err
		}
		items = append(items, stationid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLineTrains = `-- name: GetLineTrains :many

INSERT INTO station_line (stationId, lineId, odr)
SELECT ?, ?, COALESCE(MAX(odr), 0) + 1
RETURNING id
`

type GetLineTrainsParams struct {
	Stationid sql.NullInt64
	Lineid    sql.NullInt64
}

// SELECT id, name FROM train
// WHERE lineId = ?
// ORDER BY id;
func (q *Queries) GetLineTrains(ctx context.Context, arg GetLineTrainsParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getLineTrains, arg.Stationid, arg.Lineid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLines = `-- name: ListLines :many
SELECT id, name FROM line ORDER BY id
`

type ListLinesRow struct {
	ID   int64
	Name string
}

func (q *Queries) ListLines(ctx context.Context) ([]ListLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinesRow
	for rows.Next() {
		var i ListLinesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStationFromLine = `-- name: RemoveStationFromLine :exec
DELETE FROM station_line
WHERE stationId = ? AND lineId = ?
`

type RemoveStationFromLineParams struct {
	Stationid sql.NullInt64
	Lineid    sql.NullInt64
}

func (q *Queries) RemoveStationFromLine(ctx context.Context, arg RemoveStationFromLineParams) error {
	_, err := q.db.ExecContext(ctx, removeStationFromLine, arg.Stationid, arg.Lineid)
	return err
}

const updateLine = `-- name: UpdateLine :one
UPDATE line
SET name = ?
WHERE id = ?
RETURNING id
`

type UpdateLineParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateLine(ctx context.Context, arg UpdateLineParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateLine, arg.Name, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
