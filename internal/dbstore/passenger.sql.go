// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: passenger.sql

package dbstore

import (
	"context"
	"database/sql"
	"time"
)

const countActivePassengers = `-- name: CountActivePassengers :one
SELECT COUNT(*) as count FROM passenger
`

func (q *Queries) CountActivePassengers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActivePassengers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPassenger = `-- name: CreatePassenger :one
INSERT INTO passenger (id, name, current_station_id, destination_station_id, state, sentiment, spawn_time)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, current_station_id, destination_station_id, current_train_id, state, sentiment, spawn_time, created_at, updated_at
`

type CreatePassengerParams struct {
	ID                   string
	Name                 string
	CurrentStationID     int64
	DestinationStationID int64
	State                string
	Sentiment            float64
	SpawnTime            time.Time
}

func (q *Queries) CreatePassenger(ctx context.Context, arg CreatePassengerParams) (Passenger, error) {
	row := q.db.QueryRowContext(ctx, createPassenger,
		arg.ID,
		arg.Name,
		arg.CurrentStationID,
		arg.DestinationStationID,
		arg.State,
		arg.Sentiment,
		arg.SpawnTime,
	)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrentStationID,
		&i.DestinationStationID,
		&i.CurrentTrainID,
		&i.State,
		&i.Sentiment,
		&i.SpawnTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPassengerEvent = `-- name: CreatePassengerEvent :one

INSERT INTO passenger_event (passenger_id, event_type, station_id, train_id, sentiment, metadata)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, passenger_id, event_type, station_id, train_id, sentiment, metadata, created_at
`

type CreatePassengerEventParams struct {
	PassengerID string
	EventType   string
	StationID   sql.NullInt64
	TrainID     sql.NullInt64
	Sentiment   sql.NullFloat64
	Metadata    sql.NullString
}

// Passenger Event queries
func (q *Queries) CreatePassengerEvent(ctx context.Context, arg CreatePassengerEventParams) (PassengerEvent, error) {
	row := q.db.QueryRowContext(ctx, createPassengerEvent,
		arg.PassengerID,
		arg.EventType,
		arg.StationID,
		arg.TrainID,
		arg.Sentiment,
		arg.Metadata,
	)
	var i PassengerEvent
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.EventType,
		&i.StationID,
		&i.TrainID,
		&i.Sentiment,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllPassengers = `-- name: DeleteAllPassengers :exec
DELETE FROM passenger
`

func (q *Queries) DeleteAllPassengers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPassengers)
	return err
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM passenger
WHERE id = ?
`

func (q *Queries) DeletePassenger(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePassenger, id)
	return err
}

const deletePassengerEvents = `-- name: DeletePassengerEvents :exec
DELETE FROM passenger_event
WHERE passenger_id = ?
`

func (q *Queries) DeletePassengerEvents(ctx context.Context, passengerID string) error {
	_, err := q.db.ExecContext(ctx, deletePassengerEvents, passengerID)
	return err
}

const getAllActivePassengers = `-- name: GetAllActivePassengers :many
SELECT id, name, current_station_id, destination_station_id, current_train_id, state, sentiment, spawn_time, created_at, updated_at FROM passenger
ORDER BY spawn_time DESC
`

func (q *Queries) GetAllActivePassengers(ctx context.Context) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, getAllActivePassengers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrentStationID,
			&i.DestinationStationID,
			&i.CurrentTrainID,
			&i.State,
			&i.Sentiment,
			&i.SpawnTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassengerById = `-- name: GetPassengerById :one
SELECT id, name, current_station_id, destination_station_id, current_train_id, state, sentiment, spawn_time, created_at, updated_at FROM passenger
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetPassengerById(ctx context.Context, id string) (Passenger, error) {
	row := q.db.QueryRowContext(ctx, getPassengerById, id)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrentStationID,
		&i.DestinationStationID,
		&i.CurrentTrainID,
		&i.State,
		&i.Sentiment,
		&i.SpawnTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPassengerEvents = `-- name: GetPassengerEvents :many
SELECT id, passenger_id, event_type, station_id, train_id, sentiment, metadata, created_at FROM passenger_event
WHERE passenger_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetPassengerEvents(ctx context.Context, passengerID string) ([]PassengerEvent, error) {
	rows, err := q.db.QueryContext(ctx, getPassengerEvents, passengerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassengerEvent
	for rows.Next() {
		var i PassengerEvent
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.EventType,
			&i.StationID,
			&i.TrainID,
			&i.Sentiment,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassengersByStation = `-- name: GetPassengersByStation :many
SELECT id, name, current_station_id, destination_station_id, current_train_id, state, sentiment, spawn_time, created_at, updated_at FROM passenger
WHERE current_station_id = ? AND state = 'waiting'
ORDER BY spawn_time ASC
`

func (q *Queries) GetPassengersByStation(ctx context.Context, currentStationID int64) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, getPassengersByStation, currentStationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrentStationID,
			&i.DestinationStationID,
			&i.CurrentTrainID,
			&i.State,
			&i.Sentiment,
			&i.SpawnTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassengersByTrain = `-- name: GetPassengersByTrain :many
SELECT id, name, current_station_id, destination_station_id, current_train_id, state, sentiment, spawn_time, created_at, updated_at FROM passenger
WHERE current_train_id = ? AND state = 'riding'
ORDER BY spawn_time ASC
`

func (q *Queries) GetPassengersByTrain(ctx context.Context, currentTrainID sql.NullInt64) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, getPassengersByTrain, currentTrainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrentStationID,
			&i.DestinationStationID,
			&i.CurrentTrainID,
			&i.State,
			&i.Sentiment,
			&i.SpawnTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentEvents = `-- name: GetRecentEvents :many
SELECT id, passenger_id, event_type, station_id, train_id, sentiment, metadata, created_at FROM passenger_event
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) GetRecentEvents(ctx context.Context, limit int64) ([]PassengerEvent, error) {
	rows, err := q.db.QueryContext(ctx, getRecentEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassengerEvent
	for rows.Next() {
		var i PassengerEvent
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.EventType,
			&i.StationID,
			&i.TrainID,
			&i.Sentiment,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassengerBoarding = `-- name: UpdatePassengerBoarding :exec
UPDATE passenger
SET state = 'riding', current_train_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePassengerBoardingParams struct {
	CurrentTrainID sql.NullInt64
	ID             string
}

func (q *Queries) UpdatePassengerBoarding(ctx context.Context, arg UpdatePassengerBoardingParams) error {
	_, err := q.db.ExecContext(ctx, updatePassengerBoarding, arg.CurrentTrainID, arg.ID)
	return err
}

const updatePassengerDisembarking = `-- name: UpdatePassengerDisembarking :exec
UPDATE passenger
SET state = ?, current_train_id = NULL, current_station_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePassengerDisembarkingParams struct {
	State            string
	CurrentStationID int64
	ID               string
}

func (q *Queries) UpdatePassengerDisembarking(ctx context.Context, arg UpdatePassengerDisembarkingParams) error {
	_, err := q.db.ExecContext(ctx, updatePassengerDisembarking, arg.State, arg.CurrentStationID, arg.ID)
	return err
}

const updatePassengerState = `-- name: UpdatePassengerState :exec
UPDATE passenger
SET state = ?, sentiment = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePassengerStateParams struct {
	State     string
	Sentiment float64
	ID        string
}

func (q *Queries) UpdatePassengerState(ctx context.Context, arg UpdatePassengerStateParams) error {
	_, err := q.db.ExecContext(ctx, updatePassengerState, arg.State, arg.Sentiment, arg.ID)
	return err
}
