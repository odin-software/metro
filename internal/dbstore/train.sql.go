// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: train.sql

package dbstore

import (
	"context"
	"database/sql"
)

const changeTrainToLine = `-- name: ChangeTrainToLine :exec
UPDATE train
SET lineId = ?, currentId = NULL, nextId = NULL
WHERE id = ?
`

type ChangeTrainToLineParams struct {
	Lineid sql.NullInt64
	ID     int64
}

func (q *Queries) ChangeTrainToLine(ctx context.Context, arg ChangeTrainToLineParams) error {
	_, err := q.db.ExecContext(ctx, changeTrainToLine, arg.Lineid, arg.ID)
	return err
}

const createTrain = `-- name: CreateTrain :one
INSERT INTO train (name, x, y, z, currentId, makeId, lineId)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateTrainParams struct {
	Name      string
	X         float64
	Y         float64
	Z         float64
	Currentid sql.NullInt64
	Makeid    sql.NullInt64
	Lineid    sql.NullInt64
}

func (q *Queries) CreateTrain(ctx context.Context, arg CreateTrainParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTrain,
		arg.Name,
		arg.X,
		arg.Y,
		arg.Z,
		arg.Currentid,
		arg.Makeid,
		arg.Lineid,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAllTrains = `-- name: DeleteAllTrains :exec
DELETE FROM train
`

func (q *Queries) DeleteAllTrains(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTrains)
	return err
}

const deleteTrain = `-- name: DeleteTrain :exec
DELETE FROM train 
WHERE id = ?
`

func (q *Queries) DeleteTrain(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrain, id)
	return err
}

const getAllTrains = `-- name: GetAllTrains :many
SELECT id, name, x, y, z FROM train 
ORDER BY id
`

type GetAllTrainsRow struct {
	ID   int64
	Name string
	X    float64
	Y    float64
	Z    float64
}

func (q *Queries) GetAllTrains(ctx context.Context) ([]GetAllTrainsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTrainsRow
	for rows.Next() {
		var i GetAllTrainsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.Z,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTrainsFull = `-- name: GetAllTrainsFull :many
SELECT
	tr.id,
	tr.name,
	tr.x,
	tr.y,
	tr.z,
	mk.color,
	st.id as stationId,
	ln.name as lineName,
	mk.name as makeName
FROM train tr
JOIN line ln ON tr.lineId = ln.id
JOIN make mk ON tr.makeId = mk.id
JOIN station st ON tr.currentId = st.id
`

type GetAllTrainsFullRow struct {
	ID        int64
	Name      string
	X         float64
	Y         float64
	Z         float64
	Color     sql.NullString
	Stationid int64
	Linename  string
	Makename  string
}

func (q *Queries) GetAllTrainsFull(ctx context.Context) ([]GetAllTrainsFullRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTrainsFull)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTrainsFullRow
	for rows.Next() {
		var i GetAllTrainsFullRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Color,
			&i.Stationid,
			&i.Linename,
			&i.Makename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainById = `-- name: GetTrainById :one
SELECT id, name, x, y, z FROM train
WHERE id = ?
LIMIT 1
`

type GetTrainByIdRow struct {
	ID   int64
	Name string
	X    float64
	Y    float64
	Z    float64
}

func (q *Queries) GetTrainById(ctx context.Context, id int64) (GetTrainByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainById, id)
	var i GetTrainByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
	)
	return i, err
}

const getTrainByName = `-- name: GetTrainByName :one
SELECT id, name, x, y, z FROM train
WHERE name = ?
LIMIT 1
`

type GetTrainByNameRow struct {
	ID   int64
	Name string
	X    float64
	Y    float64
	Z    float64
}

func (q *Queries) GetTrainByName(ctx context.Context, name string) (GetTrainByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getTrainByName, name)
	var i GetTrainByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
	)
	return i, err
}

const getTrainLine = `-- name: GetTrainLine :one
SELECT lineId FROM station_line
WHERE stationId = ?
`

func (q *Queries) GetTrainLine(ctx context.Context, stationid sql.NullInt64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getTrainLine, stationid)
	var lineid sql.NullInt64
	err := row.Scan(&lineid)
	return lineid, err
}

const getTrainMake = `-- name: GetTrainMake :one
SELECT makeId FROM train
WHERE id = ?
`

func (q *Queries) GetTrainMake(ctx context.Context, id int64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getTrainMake, id)
	var makeid sql.NullInt64
	err := row.Scan(&makeid)
	return makeid, err
}

const getTrainNext = `-- name: GetTrainNext :one
SELECT nextId FROM train
WHERE id = ?
`

func (q *Queries) GetTrainNext(ctx context.Context, id int64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getTrainNext, id)
	var nextid sql.NullInt64
	err := row.Scan(&nextid)
	return nextid, err
}

const setTrainNext = `-- name: SetTrainNext :exec
UPDATE train
SET nextId = ?
WHERE id = ?
`

type SetTrainNextParams struct {
	Nextid sql.NullInt64
	ID     int64
}

func (q *Queries) SetTrainNext(ctx context.Context, arg SetTrainNextParams) error {
	_, err := q.db.ExecContext(ctx, setTrainNext, arg.Nextid, arg.ID)
	return err
}

const updateTrain = `-- name: UpdateTrain :one
UPDATE train
SET name = ?, x = ?, y = ?, z = ?, currentId = ?, nextId = ?
WHERE name = ?
RETURNING id
`

type UpdateTrainParams struct {
	Name      string
	X         float64
	Y         float64
	Z         float64
	Currentid sql.NullInt64
	Nextid    sql.NullInt64
	Name_2    string
}

func (q *Queries) UpdateTrain(ctx context.Context, arg UpdateTrainParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateTrain,
		arg.Name,
		arg.X,
		arg.Y,
		arg.Z,
		arg.Currentid,
		arg.Nextid,
		arg.Name_2,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
