// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: station.sql

package dbstore

import (
	"context"
	"database/sql"
)

const createStation = `-- name: CreateStation :one
INSERT INTO station (name, x, y, z, color) 
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateStationParams struct {
	Name  string
	X     sql.NullFloat64
	Y     sql.NullFloat64
	Z     sql.NullFloat64
	Color sql.NullString
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStation,
		arg.Name,
		arg.X,
		arg.Y,
		arg.Z,
		arg.Color,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteStation = `-- name: DeleteStation :exec
DELETE FROM station 
WHERE id = ?
`

func (q *Queries) DeleteStation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStation, id)
	return err
}

const getStationById = `-- name: GetStationById :one
SELECT id, name, x, y, z, color FROM station 
WHERE id = ? 
LIMIT 1
`

type GetStationByIdRow struct {
	ID    int64
	Name  string
	X     sql.NullFloat64
	Y     sql.NullFloat64
	Z     sql.NullFloat64
	Color sql.NullString
}

func (q *Queries) GetStationById(ctx context.Context, id int64) (GetStationByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStationById, id)
	var i GetStationByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
		&i.Color,
	)
	return i, err
}

const getStationByName = `-- name: GetStationByName :one
SELECT id, name, x, y, z, color FROM station
WHERE name = ? 
LIMIT 1
`

type GetStationByNameRow struct {
	ID    int64
	Name  string
	X     sql.NullFloat64
	Y     sql.NullFloat64
	Z     sql.NullFloat64
	Color sql.NullString
}

func (q *Queries) GetStationByName(ctx context.Context, name string) (GetStationByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getStationByName, name)
	var i GetStationByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
		&i.Color,
	)
	return i, err
}

const getStationLines = `-- name: GetStationLines :many
SELECT id FROM station_line 
WHERE stationId = ? 
ORDER BY id
`

func (q *Queries) GetStationLines(ctx context.Context, stationid sql.NullInt64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getStationLines, stationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStations = `-- name: ListStations :many
SELECT id, name, x, y, z, color FROM station 
ORDER BY id
`

type ListStationsRow struct {
	ID    int64
	Name  string
	X     sql.NullFloat64
	Y     sql.NullFloat64
	Z     sql.NullFloat64
	Color sql.NullString
}

func (q *Queries) ListStations(ctx context.Context) ([]ListStationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStationsRow
	for rows.Next() {
		var i ListStationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trainsAtStation = `-- name: TrainsAtStation :many
SELECT id, name FROM train
WHERE currentId = ? 
ORDER BY id
`

type TrainsAtStationRow struct {
	ID   int64
	Name string
}

func (q *Queries) TrainsAtStation(ctx context.Context, currentid sql.NullInt64) ([]TrainsAtStationRow, error) {
	rows, err := q.db.QueryContext(ctx, trainsAtStation, currentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrainsAtStationRow
	for rows.Next() {
		var i TrainsAtStationRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trainsToStation = `-- name: TrainsToStation :many
SELECT id, name FROM train 
WHERE nextId = ? 
ORDER BY id
`

type TrainsToStationRow struct {
	ID   int64
	Name string
}

func (q *Queries) TrainsToStation(ctx context.Context, nextid sql.NullInt64) ([]TrainsToStationRow, error) {
	rows, err := q.db.QueryContext(ctx, trainsToStation, nextid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrainsToStationRow
	for rows.Next() {
		var i TrainsToStationRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStation = `-- name: UpdateStation :one
UPDATE station
SET name = ?, x = ?, y = ?, z = ?
WHERE id = ?
RETURNING id
`

type UpdateStationParams struct {
	Name string
	X    sql.NullFloat64
	Y    sql.NullFloat64
	Z    sql.NullFloat64
	ID   int64
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateStation,
		arg.Name,
		arg.X,
		arg.Y,
		arg.Z,
		arg.ID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
