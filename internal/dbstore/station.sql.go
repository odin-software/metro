// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: station.sql

package dbstore

import (
	"context"
)

const getStationById = `-- name: GetStationById :one
SELECT id, name, x, y, z, created_at, updated_at FROM station WHERE id = ? ORDER BY id
`

func (q *Queries) GetStationById(ctx context.Context, id int64) (Station, error) {
	row := q.db.QueryRowContext(ctx, getStationById, id)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStationByName = `-- name: GetStationByName :one
SELECT id, name, x, y, z, created_at, updated_at FROM station
WHERE name = ? 
ORDER BY id
`

func (q *Queries) GetStationByName(ctx context.Context, name string) (Station, error) {
	row := q.db.QueryRowContext(ctx, getStationByName, name)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.Z,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStations = `-- name: ListStations :many
SELECT id, name, x, y, z, created_at, updated_at FROM station ORDER BY id
`

func (q *Queries) ListStations(ctx context.Context) ([]Station, error) {
	rows, err := q.db.QueryContext(ctx, listStations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.Z,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
